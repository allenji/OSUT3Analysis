#!/usr/bin/env perl

use strict;
use Mysql;
use File::Copy;
use Getopt::Long;
use POSIX;
use Term::ANSIColor;
use Cwd 'abs_path';
use Sys::Hostname;

select ((select (STDOUT), $| = 1)[0]);

die "This file has been deprecated.  Please use osusub.py instead.\n";

sub printHelp;
sub outputPset;
sub outputRunList;
sub getLocation;
sub outputCondor;
sub outputLxbatch;

our $db = Mysql->connect ("cmshead.mps.ohio-state.edu", "ntuple", "osuT3User") or die "Failed to connect to Tier 3, stopped";

my %opt;
Getopt::Long::Configure ("bundling");
GetOptions (\%opt, "dataset|d=s", "label|l=s", "maxEvents|m=s", "process|p=s", "filename|f=s", "queue|q=s", "random|r", "noexec|n", "help|h");
my $argc = @ARGV;

printHelp () if $opt{"help"};
printHelp () if $argc != 3 && $argc != 4;
my $dataset;
my $config;
my $directory;
my $nJobs;
if ($argc == 3)
  {
    $dataset = "";
    $config = $ARGV[0];
    $directory = $ARGV[1];
    $nJobs = $ARGV[2];
  }
if ($argc == 4)
  {
    $dataset = $ARGV[0];
    $config = $ARGV[1];
    $directory = $ARGV[2];
    $nJobs = $ARGV[3];
  }
if (!(-e $config))
  {
    print "\"$config\" does not exist!\n";
    exit;
  }
if (-e $directory)
  {
    print "Directory \"$directory\" already exists!\n";
    print "Please delete it or specify another working directory.\n";
    exit;
  }
mkdir $directory;
my $host = hostname();
my $useLxbatch = 0;    
if (index($host, 'cern.ch') != -1) {
  $useLxbatch = 1;  
}
my $nFiles = outputRunList ($dataset, $directory);
my $realNJobs = $nJobs;
$realNJobs = ceil ($nFiles / ceil ($nFiles / $realNJobs)) if $nFiles;
my $eventsPerJob = -1;
$eventsPerJob = ceil ($opt{"maxEvents"} / $realNJobs) if $opt{"maxEvents"} && $opt{"maxEvents"} >= 0;
my $realMaxEvents = $eventsPerJob * $realNJobs;
outputPset ($directory, $dataset, $opt{"maxEvents"}, $eventsPerJob, $opt{"process"}, $opt{"filename"}, $opt{"random"});
$dataset = $opt{"dataset"} if $opt{"dataset"};
if ($useLxbatch) {
  outputLxbatch($directory, $realNJobs, $opt{"queue"});
} else {
  outputCondor ("$ENV{'CMSSW_BASE'}/src/OSUT3Analysis/DBTools/data/condor.sub", $directory, $realNJobs, $dataset, $opt{"label"});
}
copy ($config, "$directory/userConfig_cfg.py");
chdir $directory;
if (!$opt{"noexec"}) {
  print "Submitting $realNJobs jobs to run on $realMaxEvents events in $nFiles files.\n" if $realMaxEvents >= 0;
  print "Submitting $realNJobs jobs to run on all events in $nFiles files.\n" if $realMaxEvents < 0;
  if ($useLxbatch) {
    system ("./lxbatchSub.sh"); 
  } else {
    system ("LD_LIBRARY_PATH=/usr/lib64/condor:\$LD_LIBRARY_PATH condor_submit condor.sub");
  }
} else {
  print "Configuration files created but no jobs submitted.\n"; 
}  

sub
outputPset
{
  my $workingDir = shift;
  my $dataset = shift;
  my $nEvents = shift;
  my $eventsPerJob = shift;
  my $process = shift;
  my $filename = shift;
  my $random = shift;  

  if (!$filename) {
      $filename = "process.TFileService.fileName";  
  }

  $process =~ s/[^[:alnum:]]//g;

  open (PSET, ">$workingDir/config_cfg.py");

  print PSET "import FWCore.ParameterSet.Config as cms\n";
  print PSET "import OSUT3Analysis.DBTools.osusub_cfg as osusub\n";
  print PSET "import re\n";
  print PSET "import userConfig_cfg as pset\n";
  print PSET "\n";
  print PSET "fileName = pset.$filename\n";  
  print PSET "fileName = fileName.pythonValue ()\n";
  print PSET "fileName = fileName[1:(len (fileName) - 1)]\n";
  print PSET "fileName = re.sub (r'^(.*)\\.([^\\.]*)\$', r'\\1_' + str (osusub.jobNumber) + r'.\\2', fileName)\n";
  print PSET "pset.$filename = fileName\n";
  print PSET "\n";
  if ($dataset)
    {
      print PSET "pset.process.source.fileNames = cms.untracked.vstring (osusub.runList)\n";
      print PSET "pset.process.maxEvents.input = cms.untracked.int32 ($eventsPerJob)\n" if $eventsPerJob < 0;
    }
  print PSET "pset.process.maxEvents.input = cms.untracked.int32 ($eventsPerJob)\n" if $eventsPerJob >= 0;
  print PSET "process = pset.process\n";
  print PSET "process.setName_ (process.name_ () + '$process')\n" if $process;

  if ($random) { 
# Change the random number seed for each job.
# Follow instructions from https://twiki.cern.ch/twiki/bin/view/CMSPublic/WorkBookGeneration#RndmSeeds  
      print PSET "pset.process.RandomNumberGeneratorService.generator.initialSeed = osusub.jobNumber \n";   
  }
  
  close (PSET);
}

sub
outputRunList
{
  my $dataset = shift;
  my $workingDir = shift;

  return 0 if !$dataset;
  my $location;
  my $nFiles;
  my $status;
  my $crossSection;
  my $files;
  my $isLocation = 0;
  my $isRunList = 0;
  $isLocation = 1 if -d $dataset;
  $isRunList = 1 if -f $dataset;
  $location = $dataset if $isLocation;
  my $isRemote = $ENV{"HOSTNAME"} ne "interactive-0-0.local" && $ENV{"HOSTNAME"} ne "interactive-0-1.local" && $ENV{"HOSTNAME"} ne "cmshead.mps.ohio-state.edu" && $ENV{"HOSTNAME"} ne "cms-0.mps.ohio-state.edu";
  if (!$isLocation && !$isRunList)
    {
      ($location, $nFiles, $status, $crossSection, $files) = getLocation ($dataset);
      if ($status ne "present")
        {
          print "This dataset is not marked as present on the Tier 3!\n";
          print "Continue anyway? (y/N): ";
          my $response = <STDIN>;
          $response =~ s/\n//g;
          exit if !$response || lc ($response) ne "y";
        }
    }
  if ($isLocation)
    {
      my @locations = split (":", $location);
      foreach my $dir (@locations)
        {
          if (!(-e $dir))
            {
              print "The location provided is not a valid directory!\n";
              exit;
            }
          opendir (LOCATION, $dir);
          my @filesInDir = readdir (LOCATION);
          closedir (LOCATION);
          foreach my $file (@filesInDir)
            {
              next if $file eq ".";
              next if $file eq "..";
              next if !($file =~ m/\.root$/);
              push (@{$files}, abs_path ("$dir/$file"));
            }
        }
    }
  if (!$isRemote && $isRunList)
    {
      open (RUNLIST, $dataset);
      while (my $file = <RUNLIST>)
        {
          push (@{$files}, abs_path ($file));
        }
      close (RUNLIST);
    }
  my $prefix = "file:";
  $prefix = "root://cms-0.mps.ohio-state.edu:1094//" if $isRemote;
  open (RUNLIST, ">$workingDir/runList.py");
  print RUNLIST "runList = [\n";
  $nFiles -= $nFiles;
  if ($files) {  # Only loop if there are files found; otherwise an error results.  
      for (my $i = 0; $i < @{$files}; $i++)
      {
	  next if $files->[$i] eq ".";
	  next if $files->[$i] eq "..";
	  next if !($files->[$i] =~ m/\.root$/);
	  print RUNLIST "'" . $prefix . $files->[$i] . "'";
	  print RUNLIST "," if $i + 1 != @{$files};
	  print RUNLIST "\n";
	  $nFiles++;
      }
  } else {
      $nFiles = 1;    
  }
  print RUNLIST "]";
  close (RUNLIST);
  if ($crossSection && $crossSection >= 0.0)
    {
      open (CROSS_SECTION, ">$workingDir/crossSectionInPicobarn.txt");
      print CROSS_SECTION "$crossSection\n";
      close (CROSS_SECTION);
    }

  return $nFiles;
}

sub
getLocation
{
  my $dataset = shift;

  my $results;
  my $queryDataset = $dataset;
  $queryDataset =~ s/\*/%/g;
  $queryDataset =~ s/(.*)/%$1%/g;
  my $query = "select dataset,user,creationTime,location,nFiles,status,crossSectionInPicobarn,higherOrderCrossSectionInPicobarn,fileList from ntuple where dataset like '$queryDataset' order by creationTime";
  $db->selectdb ("ntuple");
  $results = $db->query ($query);
  if ($results->numrows () == 1)
    {
      my @row = $results->fetchrow ();
      my @files = split (/\n/, $row[8]);
      $row[7] += 0;
      return ($row[3], $row[4], $row[5], $row[7], \@files) if $row[7] > 0;
      return ($row[3], $row[4], $row[5], $row[6], \@files) if $row[7] <= 0;
    }
  if ($results->numrows () == 0)
    {
      print "Dataset does not exist on the Tier 3!\n";
      exit;
    }
  my %map;
  print "Found multiple datasets matching\n";
  print "\"$dataset\":\n";
  for (my $i = 1; $i <= $results->numrows (); $i++)
    {
      my @row = $results->fetchrow ();
      my @files = split (/\n/, $row[8]);
      $row[2] =~ s/([^ ]*) [^ ]*/$1/g;
      $map{"$i"} = [$row[3], $row[4], $row[5], $row[7], \@files] if $row[7];
      $map{"$i"} = [$row[3], $row[4], $row[5], $row[6], \@files] if !$row[7];
      printf "(%2d) $row[0]\n", $i;
      print "     (";
      print color "green" if $row[5] eq "present";
      print color "bold yellow" if $row[5] eq "submitted" or $row[5] eq "finishing";
      print color "bold red" if $row[5] eq "created" or $row[5] eq "cancelled" or $row[5] eq "deprecated" or $row[5] eq "finished";
      print $row[5];
      print color "reset";
      print ") created by $row[1] on $row[2]\n";
    }
  print "\nWhich dataset would you like to use?: ";
  my $response = <STDIN>;
  $response =~ s/[ \t\n]//g;
  if (!(exists $map{$response}))
    {
      print "Your selection \"$response\" was not a valid option! Quitting.\n";
      exit;
    }

  return ($map{$response}[0], $map{$response}[1], $map{$response}[2], $map{$response}[3], $map{$response}[4]);
}

sub
outputCondor
{
  my $condorFileName = shift;
  my $workingDir = shift;
  my $nJobs = shift;
  my $dataset = shift;
  my $label = shift;

  my $cmsRun = `which cmsRun`;
  my $condorFile = "";

  if (!(-e $condorFileName))
    {
      my $arguments = "Arguments               = config_cfg.py True $nJobs \$(Process)";
      $arguments .= " $dataset" if $dataset;
      $arguments .= " NULL" if !$dataset;
      $arguments .= " $label" if $label;
      $arguments .= " NULL" if !$label;
      $arguments .= "\n";

      $condorFile .= "Executable              = $cmsRun\n";
      $condorFile .= "Universe                = vanilla\n";
      $condorFile .= "Getenv                  = True\n";
      $condorFile .= $arguments;
      $condorFile .= "\n";
      $condorFile .= "Output                  = condor_\$(Process).out\n";
      $condorFile .= "Error                   = condor_\$(Process).err\n";
      $condorFile .= "Log                     = condor_\$(Process).log\n";
      if (-d $dataset) {
	  $condorFile .= "Transfer_Input_Files    = config_cfg.py,userConfig_cfg.py,runList.py\n";
      } else {
	  $condorFile .= "Transfer_Input_Files    = config_cfg.py,userConfig_cfg.py\n";  # Do not include runList.py if no dataset defined.  
      }
      $condorFile .= "\n";
      $condorFile .= "+IsLocalJob             = true\n";
      $condorFile .= "Rank                    = TARGET.IsLocalSlot\n";
      $condorFile .= "\n";
      $condorFile .= "Queue $nJobs\n";
    }
  else
    {
      open (SUB, "<$condorFileName");
      my @condorFile = <SUB>;
      close (SUB);
      $condorFile = join ("", @condorFile);
      $condorFile =~ s/\$cmsRun/$cmsRun/g;
      $condorFile =~ s/\$nJobs/$nJobs/g;
      $condorFile =~ s/\$dataset/$dataset/g if $dataset;
      $condorFile =~ s/\$dataset/NULL/g if !$dataset;
      $condorFile =~ s/\$label/$label/g if $label;
      $condorFile =~ s/\$label/NULL/g if !$label;
      $condorFile =~ s/,runList.py//g if !$dataset;  
    }

  open (SUB, ">$workingDir/condor.sub");
  print SUB $condorFile;
  close (SUB);
}

sub
outputLxbatch
{
  my $workingDir = shift;
  my $nJobs = shift;
  my $queue = shift;
  if (!$queue) {
    $queue = "8nh";    
  }

  my $currentDir = getcwd();  
  my $batchFile = "";
  $batchFile .= "#!/bin/sh \n";  
  $batchFile .= "for i in {1..$nJobs} \n";  
  $batchFile .= "do \n";  
  $batchFile .= "  bsub -q $queue -oo $currentDir/$workingDir/lxbatch_\$i.log $currentDir/$workingDir/lxbatchRun.sh \$i \n";   
  $batchFile .= "done \n";  
  $batchFile .= "echo \"Finished submitting $nJobs jobs.\" \n";    
  open (SUB, ">$workingDir/lxbatchSub.sh");
  print SUB $batchFile;
  close (SUB);

  $batchFile = "";
  $batchFile .= "#!/bin/sh \n";  
  $batchFile .= "cd $currentDir/$workingDir/ \n"; 
  $batchFile .= "eval `scram runtime -sh` \n"; 
  $batchFile .= "cmsRun config_cfg.py True $nJobs \$1 NULL NULL \n";  # Not set up to use a dataset with lxbatch.    
  open (SUB, ">$workingDir/lxbatchRun.sh");
  print SUB $batchFile;
  close (SUB);

  system ("chmod +x $workingDir/lxbatchRun.sh"); 
  system ("chmod +x $workingDir/lxbatchSub.sh"); 


}

sub
printHelp
{
  my $exeName = $0;
  $exeName =~ s/^.*\/([^\/]*)$/$1/;

  print "**********************************\n";
  print "THIS FILE HAS BEEN DEPRECATED.  PLEASE USE osusub.py INSTEAD.\n";
  print "**********************************\n\n\n\n";
  print "Usage: $exeName [OPTION]... [DATASET | LOCATION | LIST] CONFIG DIRECTORY NJOBS\n";
  print "Submits CMSSW jobs to the OSU Tier 3 compute nodes using Condor.\n";
  print "\n";
  printf "%-29s%s\n", "  -d, --dataset DATASET", "override the dataset name";
  printf "%-29s%s\n", "  -h, --help", "print this help message";
  printf "%-29s%s\n", "  -l, --label LABEL", "give the dataset a short label";
  printf "%-29s%s\n", "  -m, --maxEvents N", "only run over N events in the dataset; default is";
  printf "%-29s%s\n", "  -p, --process PROCESS", "suffix for the process name";
  printf "%-29s%s\n", " ", "to run over all events";
  printf "%-29s%s\n", "  -f, --filename FILENAME", "parameter of output filename in config file; default is process.TFileService.fileName";
  printf "%-29s%s\n", "  -r, --random", "set the random number seed equal to the job number; useful for signal generation";  
  printf "%-29s%s\n", "  -q, --queue", "choose the lxbatch queue to use; default is 8nh";  
  printf "%-29s%s\n", "  -n, --noexec", "set up the required configuration files, but do not submit jobs";  
  print "\n";
  print "The optional first argument must be either a DATASET registered in the Tier 3\n";
  print "ntuple database, a LOCATION which exists on disk, or a text file containing a\n";
  print "LIST of files to run over. CONFIG must be a valid CMSSW python configuration\n";
  print "which can be used with cmsRun. DIRECTORY is a working directory that is created\n";
  print "and in which all output, both from the CMSSW jobs and from Condor, is placed.\n";
  print "Finally, NJOBS is the number of Condor jobs that will be created.\n";

  exit;
}
